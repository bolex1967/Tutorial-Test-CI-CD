ProIT
Тестування
Основи тестування:
Як розуміти різні типи тестів
1 із 8 уроків
Обов'язкове завдання
Вивчіть матеріал і відтворіть його у своєму проєкті, надішліть його на перевірку.

Також дайте відповідь на декілька питань ↓
1. Що таке тестування в контексті розробки програмного забезпечення і чому воно має значення?
2. З яких трьох частин зазвичай складається тест (test) у програмуванні?
3. Які основні типи тестів представлені у піраміді тестування (testing pyramid)?
4. У чому різниця між модульними тестами (unit tests) та інтеграційними тестами (integration tests)?
5. Як відрізняються кінцеві тести (end-to-end tests) від інших типів тестів і яку роль вони відіграють у піраміді тестування?

Практичне питання, що вимагає написання коду:
Напишіть код модульного тесту для функції, яка додає два числа, переконайтеся, що тест перевіряє правильність результату при дійсних вхідних параметрах.

=======
1. Що таке тестування в контексті розробки програмного забезпечення і чому воно має значення?
Тестування - це процес перевірки того, що наш код працює так як очікується, функціонує за призначенням і відповідає вимогам наших користувачів та клієнтів. При тестуванні виявляються помилки на ранніх етапах, що економить наш час, оскільки при збільшенні кількості коду зростає імовірність появи помилок і багів.

2. З яких трьох частин зазвичай складається тест (test) у програмуванні?
Arrange (підготовка), act (дія), assert (перевірка).

3. Які основні типи тестів представлені у піраміді тестування (testing pyramid)?
Unit tests (модульні тести), Integration tests (інтеграційні тести) та End-to-end tests (кінцеві тести)

4. У чому різниця між модульними тестами (unit tests) та інтеграційними тестами (integration tests)?
Unit tests (модульні тести) - це тести, які перевіряють найменші одиниці коду, такі як функції, методи або класи. Вони, як правило, пишуться розробниками коду і працюють швидко і часто. Це найбазовіший і найчисленніший тип тестів, який утворює основу testing pyramid (піраміди тестування).
Integration tests (інтеграційні тести) - це тести, які перевіряють, як різні одиниці коду працюють разом. Наприклад, як функція взаємодіє з базою даних (API) або іншою функцією. Вони, зазвичай, пишуться розробниками або тестувальниками, які інтегрують код. Ці тести працюють повільніше і рідше ніж unit tests. Це проміжний тип тестів, який утворює середній шар testing pyramid.

5. Як відрізняються кінцеві тести (end-to-end tests) від інших типів тестів і яку роль вони відіграють у піраміді тестування?
End-to-end tests (кінцеві тести) - це тести, які перевіряють, як вся система працює з точки зору користувача. Пишуться тестувальниками, які оцінюють систему. Ці тести працюють найповільніше і найрідше. Це найскладніший і найбільш повний тип тестів, і вони утворюють вершину testing pyramid.

=======
Тест - це шматок коду, який перевіряє, чи інший шматок коду поводиться так, як очікується, за певних умов.
Arrange (підготовка) - встановлюємо початковий стан нашого коду, наприклад, створюємо змінні, об'єкти або макетні дані.
Act (дія) - виконуємо код, який ми хочемо протестувати, наприклад, викликаємо функцію або метод.
Assert (перевірка) - перевіряємо, що результат коду відповідає нашим очікуванням.
Концепція Test types (типи тестів) - це категорії тестів, які відрізняються своїм scope (обсягом), level (рівнем) та purpose (метою).
Залежно від типу тесту ми можемо тестувати різні аспекти нашого коду, такі як logic (логіка), functionality (функціональність), interface (інтерфейс), performance (продуктивність) або security (безпека).
Один із способів класифікації тестів - це використання testing pyramid (піраміди тестів), яа є візуальним представленням test types (типів тестів) та їх пропорцій у типовому програмному проекті.
Вона складається з трьох шарів: unit tests (модульні тести), integration tests (інтеграційні тести) та end-to-end tests (кінцеві тести).
Unit tests (модульні тести) - це тести, які перевіряють найменші одиниці коду, такі як функції, методи або класи. Вони, як правило, пишуться розробниками, які пишуть код і працюють швидко і часто. Це найбазовіший і найчисленніший тип тестів і вони утворюють основу testing pyramid (піраміди тестування).
Integration tests (інтеграційні тести) - це тести, які перевіряють, як різні одиниці коду працюють разом. Наприклад, як функція взаємодіє з базою даних (API) або іншою функцією. Вони, зазвичай, пишуться розробниками або тестувальниками, які інтегрують код. Вони працюють повільніше і рідше ніж unit tests. Це проміжний тип тестів, який утворює середній шар testing pyramid.
End-to-end tests (кінцеві тести) - це тести, які перевіряють, як вся система працює з точки зору користувача. Пишуться тестувальниками, які оцінюють систему і працюють найповільніше і найрідше. Це найскладніший і найбільш повний тип тестів, і вони утворюють вершину testing pyramid.
Чим вище test type, тим більше coverage (покриття) і confidence (впевненість) він надає, але й більше часу та ресурсів споживає. Тому testing pyramid пропонує, що ми повинні мати найбільше unit tests потім integration tests а потім end-to-end tests для збалансованого та ефективного тестування.







